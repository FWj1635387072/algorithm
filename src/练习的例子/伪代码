
p 开始下标
q 结束下标
k 求第k小个元素(递增序列中第k个元素)

selectK(A,p,r,k){
    q = partition(A,p,r);
    qK = q - p + 1; //主元的下标
    if(qK == k) return A[q]; //主元是第几个元素
    else if(qK > k) return selectK(A,p,q-1,k);
    else return selectK(A,q+1,r,k-qK);
}

partition(A,p,r){
    
}


//水王，两两消除法






//加强版水王


//辅助空间，查看最小可用id
//也可用分区的思想


//合并有序数组
    A为较大数组，可容纳A+B中的所有元素。
    B为待合并数组
mergeArr(A,B){
     //可用二分
    for(i ::){
        if(A[i] == 0){
            a = i;
            break;
        }
    }
    //拼接
    for(i a:a+B.lenth){
        A[i] = B[i - a];
    }
    while(aP < bP){
        while(aP < bP && aP > 0){
            
            
        }
        while(aP < bP && bP > a){
            
        }
    }
}



堆化
MakeMinHeap(a[0...n-1])
    for i=n/2-1 down to 0       //这些节点的子树已经是合法的最小堆
        MinHeapFixDown(a,i,n)

//假设某个节点的左右子树分别满足最小堆，现在检测整体是否满足
//如果该节点不满足，向下沉，将它的最小子节点上浮
MinHeapFixDown(a[0...n-1],i,lenth)
    j=2*i+1         //左孩子
    temp=a[i]
    while(j<length)
        if j+1<length && a[j+1]>a[j]    //在左右孩子中找最小的
            j++                         //小孩子
        if a[j] < temp                  //小孩子比自己还小，则小孩子上浮
            a[i] = a[j]                     
            i = j                       //站在小孩子的位置，大孩子那边不管（无变动）
            j = 2*i+1                   //指向小孩子的左孩子
        else
            break
    //循环走完，i的位置即为temp应该放的位置   
        

MinHeap(A){
    n = A.lenth;
    for i from n/2-1 down to 0{
        MinHeapFixDown(A,i);
    }
}

MinHeapFixDown(A,i,n){
    //找到左右孩子
    left = 2*i + 1;
    right = 2*i + 2;
    //左孩子越界，i就是叶子节点
    if(left >= n){
        return;
    }
    min = left;
    if(right >= n){
        min = left;
    }else{
        if(A[right]< A[left]){
            min = right;
        }
    }
    
    //如果A[i]比两个孩子都要小，不用调整
    if(A[i] <= A[min]}{
        return;
    }else{                  //否则，找到两个孩子中较小的，和i交换
       temp = A[i];
       A[i] = A[min];
       A[min] = temp;
    }
        
    //小孩子那个位置的值发生了变化，i变更为小孩子那个位置，递归调整
    MinHeapFixDown(A,min,n);
}        


sort(A){
    //先对A进行堆化
    MinHeap(A);
    for(int x = n - 1;x>=0;x--){
    //把堆顶（0号元素）和最后一个元素对调
        swap(A,0,x);
    //缩小堆的范围，对堆顶元素进行向下调整
        MinHeapFixDown(A,0,x-1);
    }
}



maxHeap(A){
    //大值逐步上浮
    for(int i = A.length/2 - 1; i >= 0;i--){
        maxHeapFixDown(A,i,A.length);
    }
}

maxHeapFixDown(A,i,n){
    //找到左右子节点
    left = 2*i + 1;
    right = 2*i + 2;
    //确定是否有子节点,确定最大值
    max = left;
    if(left >= n)
        return;
    if(right >= n){
        return;
    }else{
        if(A[right] > A[left]){
            max = right;
        }
    }
    //最大值上浮
    swap(a,i,max);
    //递归向下对子树进行上浮
    maxHeapFixDown(a,max,n)
}



dfs(table,x,y){
    if(x==9){
        print(table);
        System.exit(0);
    }
    if(table[x][y] == '0'){
        //选1-9之间合法的数字填到x,y这个地方
        for(i = 1..9){
            boolean res = check(table,x,y,i);
            if(res){
                table[x][y] = (char)'0'+i; //转移到下一个状态
                dfs(table,x + (y+1) / 9,(y+1)%9);
                
            }
        }
        table[x][y] = '0';//回溯
    }else{
        //继续找下一个需要处理的数字
        dfs(table,x + (y+1) / 9,(y+1)%9)
        
    }

}




